// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  name         String
  email        String  @unique
  passwordHash String?

  groups              GroupParticipants[]
  expenseTransactions ExpenseTransactions[]
}

model Group {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  name         String
  currencyCode String

  participants GroupParticipants[]
  expenses     Expense[]
}

model GroupParticipants {
  participant   User   @relation(fields: [participantId], references: [id])
  participantId String

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  joinedAt DateTime             @default(now()) @db.Timestamptz()
  role     GroupParticipantRole @default(MEMBER)

  @@id([participantId, groupId])
}

enum GroupParticipantRole {
  ADMIN
  MEMBER
}

model Expense {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  description String
  amount      Int
  scale       Int      @db.SmallInt()
  spentAt     DateTime

  transactions ExpenseTransactions[]
}

model ExpenseTransactions {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  expenseId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  amount Int
  scale  Int @db.SmallInt()
}
