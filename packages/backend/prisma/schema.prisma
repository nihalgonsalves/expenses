// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  name         String
  email        String  @unique
  passwordHash String? @map("password_hash")

  sheets                    SheetMemberships[]
  expenseTransactions       ExpenseTransactions[]
  notificationSubscriptions NotificationSubscription[]

  @@map("users")
}

model NotificationSubscription {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  description String

  endpoint  String @unique
  keyAuth   String @map("key_auth")
  keyP256dh String @map("key_p256dh")

  @@map("notification_subscriptions")
}

model Sheet {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  type         SheetType
  name         String
  currencyCode String    @map("currency_code")

  participants SheetMemberships[]
  expenses     Expense[]

  @@map("sheets")
}

enum SheetType {
  PERSONAL
  GROUP

  @@map("sheet_type")
}

enum SheetParticipantRole {
  ADMIN
  MEMBER

  @@map("sheet_participant_role")
}

model SheetMemberships {
  participant   User   @relation(fields: [participantId], references: [id])
  participantId String @map("participant_id")

  sheet   Sheet  @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  sheetId String @map("sheet_id")

  joinedAt DateTime             @default(now()) @map("joined_at") @db.Timestamptz()
  role     SheetParticipantRole @default(MEMBER)

  @@id([participantId, sheetId], name: "sheetMembership")
  @@map("sheet_memberships")
}

enum ExpenseType {
  EXPENSE
  INCOME
  TRANSFER

  @@map("expense_type")
}

model Expense {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  type ExpenseType

  sheet   Sheet  @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  sheetId String @map("sheet_id")

  category    String
  description String
  amount      Int
  scale       Int      @db.SmallInt()
  spentAt     DateTime @map("spent_at")

  transactions ExpenseTransactions[]

  @@map("expenses")
}

model ExpenseTransactions {
  id String @id

  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  expenseId String  @map("expense_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  amount Int
  scale  Int @db.SmallInt()

  @@map("expense_transactions")
}
